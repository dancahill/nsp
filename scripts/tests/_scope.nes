#!/usr/bin/nesla
if (type(expect)=='null') { include("_expect.nes"); }
function testscope() {
	function subf1(p1, p2) {
		local p3="b";
		expect("testing subscope", "[5][x][b]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
		return;
	}
	function subf2(p1, p2, p3) {
		expect("testing subscope(t)", "[5][x][1][null]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3.a)+"]["+tostring(p3.c)+"]");
		return;
	}
	function subf3(p1, p2, p3) {
		expect("testing subscope(t)", "[5][x][null][2]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3.a)+"]["+tostring(p3.c)+"]");
		return;
	}
	function subf4(i) {
		print("[", i, "]");
		if (i<5) { subf4(i+1); }
		print("[", i, "]");
		return;
	}
	local p3="a";
	local ack = { a=1, b = { c=2 } };

	expect("testing scope", "[null][null][a]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	subf1(5, "x");
	expect("testing scope", "[null][null][a]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	subf2(5, "x", ack);
	subf3(5, "x", ack.b);
	expect("testing scope", "[null][null][a]",     "["+tostring(p1)+"]["+tostring(p2)+"]["+tostring(p3)+"]");
	subf4(0);
	print("\n");
	return;
}
testscope();
