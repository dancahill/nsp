# poker sample prog by Dan Cahill
include("_cards.nes");
include("_ajax.nes");
global hand_vals = {
	{ name="NONE",            val=0   },
	{ name="JACKS OR HIGHER", val=1   },
	{ name="2 PAIRS",         val=2   },
	{ name="3 OF A KIND",     val=3   },
	{ name="STRAIGHT",        val=5   },
	{ name="FLUSH",           val=7   },
	{ name="FULL HOUSE",      val=10  },
	{ name="4 OF A KIND",     val=40  },
	{ name="STR FLUSH",       val=100 },
	{ name="ROYAL FLUSH",     val=500 },
};

function getcard() {
	while (1) {
		local x=math.rand(52);
		if (string.cmp(type(CARDS[x]['dealt']), 'null')==0) {
			CARDS[x]['dealt']=true;
			return x;
		}
	}
	return 0;
}

function regcard(p) {
	local x=number(p);

	if (string.cmp(type(p), 'null')!=0) { CARDS[x]['dealt']=true; }
	return x;
}

function showscore(r) {
	print("<TABLE BORDER=1 CELLPADDING=2 CELLSPACING=0 WIDTH=400>\n");
	print("<TR ID=row9"); if (r==9) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>ROYAL FLUSH     </TD><TD ALIGN=right>", (hand_vals[9].val*1), "</TD></TR>\n");
	print("<TR ID=row8"); if (r==8) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>STRAIGHT FLUSH  </TD><TD ALIGN=right>", (hand_vals[8].val*1), "</TD></TR>\n");
	print("<TR ID=row7"); if (r==7) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>FOUR OF A KIND  </TD><TD ALIGN=right>", (hand_vals[7].val*1), "</TD></TR>\n");
	print("<TR ID=row6"); if (r==6) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>FULL HOUSE      </TD><TD ALIGN=right>", (hand_vals[6].val*1), "</TD></TR>\n");
	print("<TR ID=row5"); if (r==5) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>FLUSH           </TD><TD ALIGN=right>", (hand_vals[5].val*1), "</TD></TR>\n");
	print("<TR ID=row4"); if (r==4) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>STRAIGHT        </TD><TD ALIGN=right>", (hand_vals[4].val*1), "</TD></TR>\n");
	print("<TR ID=row3"); if (r==3) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>THREE OF A KIND </TD><TD ALIGN=right>", (hand_vals[3].val*1), "</TD></TR>\n");
	print("<TR ID=row2"); if (r==2) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>TWO PAIRS       </TD><TD ALIGN=right>", (hand_vals[2].val*1), "</TD></TR>\n");
	print("<TR ID=row1"); if (r==1) { print(" BGCOLOR=#00FF7F"); } print(">");
	print("<TD>JACKS OR HIGHER </TD><TD ALIGN=right>", (hand_vals[1].val*1), "</TD></TR>\n");
	print("</TABLE><BR>\n");
	return;
}

function ratehand() {
	global cards    = { };
	global flush    = { 0, 0, 0, 0, 0 };
	global kind     = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	global straight = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	for (n=0;n<5;n++)  { flush[n]=0;    }
	for (n=0;n<14;n++) { kind[n]=0;     }
	for (n=0;n<15;n++) { straight[n]=0; }
	for (n=0;n<52;n++) { cards[n]=0;    }
	for (n=0;n<5;n++)  { local i=c[n]; cards[i]=1; }
#	CHECK FOR ROYAL FLUSH
	if ((cards[36]==1)&&(cards[40]==1)&&(cards[44]==1)&&(cards[48]==1)&&(cards[0]==1)) { return 9; }
	if ((cards[37]==1)&&(cards[41]==1)&&(cards[45]==1)&&(cards[49]==1)&&(cards[1]==1)) { return 9; }
	if ((cards[38]==1)&&(cards[42]==1)&&(cards[46]==1)&&(cards[50]==1)&&(cards[2]==1)) { return 9; }
	if ((cards[39]==1)&&(cards[43]==1)&&(cards[47]==1)&&(cards[51]==1)&&(cards[3]==1)) { return 9; }
#	CHECK FOR STRAIGHT FLUSH
	for (n=0;n<36;n++) { if ((cards[n]==1)&&(cards[n+4]==1)&&(cards[n+8]==1)&&(cards[n+12]==1)&&(cards[n+16]==1)) { return 8; } }
#	CHECK FOR 4 OF A KIND
	for (n=0;n<14;n++) { kind[n]=0; }
	for (n=0;n<5;n++)  { kind[math.floor(number(c[n])/4)]++; }
	for (n=0;n<13;n++) { if (kind[n]==4) { return 7; } }
#	CHECK FOR A FULL HOUSE
	for (n=0;n<14;n++) { kind[n]=0; }
	for (n=0;n<5;n++)  { kind[math.floor(number(c[n])/4)]++; }
	global pair=0;
	for (n=0;n<13;n++) {
		if (kind[n]==3) { global pair=pair+1.5; }
		if (kind[n]==2) { global pair=pair+1; }
	}
	if (pair==2.5) { return 6; }
#	CHECK FOR A FLUSH
	for (n=0;n<4;n++)  { flush[n]=0; }
	for (n=0;n<13;n++) {
		if (cards[n*4+0]==1) { flush[0]++; }
		if (cards[n*4+1]==1) { flush[1]++; }
		if (cards[n*4+2]==1) { flush[2]++; }
		if (cards[n*4+3]==1) { flush[3]++; }
	}
	for (n=0;n<3;n++) { if (flush[n]==5) { return 5; } }
#	CHECK FOR A STRAIGHT
	for (n=0;n<14;n++) { straight[n]=0; }
	for (n=0;n<5;n++)  { straight[math.floor(number(c[n])/4)]=1; }
	straight[13]=straight[0];
	for (n=0;n<10;n++) { if (straight[n]+straight[n+1]+straight[n+2]+straight[n+3]+straight[n+4]==5) { return 4; } }
#	CHECK FOR 3 OF A KIND
	for (n=0;n<13;n++) { kind[n]=0; }
	for (n=0;n<5;n++)  { kind[math.floor(number(c[n])/4)]++; }
	for (n=0;n<13;n++) { if (kind[n]==3) { return 3; } }
#	CHECK FOR 2 PAIRS
	global pair=0;
	for (n=0;n<13;n++) { kind[n]=0; }
	for (n=0;n<5;n++)  { kind[math.floor(number(c[n])/4)]++; }
	for (n=0;n<13;n++) { if (kind[n]==2) { global pair=pair+1; } }
	if (pair==2) { return 2; }
#	CHECK FOR HIGH PAIR
	for (n=0;n<13;n++) { kind[n]=0; }
	for (n=0;n<5;n++)  { kind[math.floor(number(c[n])/4)]++; }
	if ((kind[10]==2)||(kind[11]==2)||(kind[12]==2)||(kind[0]==2)) { return 1; }
	return 0;
}

function printredraw() {
	print("<SCRIPT LANGUAGE=JavaScript>\n<!--\n");
	print("function redraw(r) {\n");
	for (n=0;n<5;n++) {
		print("	document.game.c",n,".value=r.getElementsByTagName('c",n,"')[0].firstChild.data;\n");
		print("	document.card",n,".src=r.getElementsByTagName('c",n,"f')[0].firstChild.data;\n");
		print("	document.card",n,".title=r.getElementsByTagName('c",n,"n')[0].firstChild.data;\n");
	}
	print("	rating=r.getElementsByTagName('rating')[0].firstChild.data;\n");
	print(
		"	for (var i=1;i<10;i++) {\n",
		"		if (i==rating) {\n",
		"			document.getElementById('row'+i).bgColor='#00FF7F';\n",
		"		} else {\n",
		"			document.getElementById('row'+i).bgColor='#FFFFFF';\n",
		"		}\n",
		"	}\n"
	);
	print("}\n");
	print("function toggle(hc) {\n");
	print("	if (document.getElementById('h'+hc).value==0) {\n");
	print("		document.getElementById('h'+hc).value=1;\n");
	print("		document.getElementById('hbut'+hc).bgColor='#00FF7F';\n");
	print("	} else {\n");
	print("		document.getElementById('h'+hc).value=0;\n");
	print("		document.getElementById('hbut'+hc).bgColor='#FFFFFF';\n");
	print("	}\n");
	print("}\n");
	print("// -->\n</SCRIPT>\n");
	return;
}

function xmlmain() {
	global c = { 0, 0, 0, 0, 0 };
	global held = { 0, 0, 0, 0, 0 };

	if (number(_POST['h0'])==0) { c[0]=getcard(); } else { c[0]=regcard(_POST['c0']); held[0]=1; }
	if (number(_POST['h1'])==0) { c[1]=getcard(); } else { c[1]=regcard(_POST['c1']); held[1]=1; }
	if (number(_POST['h2'])==0) { c[2]=getcard(); } else { c[2]=regcard(_POST['c2']); held[2]=1; }
	if (number(_POST['h3'])==0) { c[3]=getcard(); } else { c[3]=regcard(_POST['c3']); held[3]=1; }
	if (number(_POST['h4'])==0) { c[4]=getcard(); } else { c[4]=regcard(_POST['c4']); held[4]=1; }
	global opt = _POST.opt;
	global r=ratehand();
#	if response header isn't text/xml, IE will choke on this
	HTRESPONSE['CONTENT_TYPE']="text/xml";
	print("<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\n");
	print("<response>\n");
	for (n=0;n<5;n++) {
		print("<c",n,">",c[n],"</c",n,">\n<c",n,"f>/cards/",CARDS[c[n]].file,"</c",n,"f>\n<c",n,"n>",CARDS[c[n]].name,"</c",n,"n>\n");
	}
	print("	<rating>",r,"</rating>\n");
	print("</response>\n");
	return;
}

function main() {
	global c = { [0]=getcard(), [1]=getcard(), [2]=getcard(), [3]=getcard(), [4]=getcard() }
	global held = { 0,0,0,0,0 };
	global opt = "";

#	if (string.cmp(type(_SERVER), 'null')==0) { # this is a debug block
#		global _SERVER = { REQUEST_METHOD="POST", SCRIPT_NAME="/nesla/blah" }
#		global _POST = { c0=12, c1=16, c2=20, c3=24, c4=28, h0=1, h1=1, h2=1, h3=1, h4=1 }
#	}
	print("<HTML>\n<HEAD>\n<TITLE>Nesla-AJAX Poker</TITLE>\n");
	print("<STYLE TYPE=text/css>\n");
	print("A        { color: #0000FF; text-decoration: none; }\n");
	print("A:HOVER  { background-color: #E0E0FF; }\n");
	print("</STYLE>\n");
	print("</HEAD>\n<BODY>\n<CENTER>\n");
	printxml();
	printredraw();
	print("<SPAN ID='remstatus'>");
	print("<FORM ACTION='", _SERVER['SCRIPT_NAME'], "' METHOD='POST' NAME='game'>\n");
	global r=ratehand();
	showscore(r);
	for (n=0;n<5;n++) {
		print("<INPUT TYPE=hidden NAME=c", n, " VALUE='", c[n], "'>");
		print("<INPUT TYPE=hidden NAME=h", n, " VALUE=", held[n], ">\n");
	}
	print("<TABLE BORDER=1 CELLPADDING=2 CELLSPACING=0>\n");
	print("<TR>");
	for (n=0;n<5;n++) {
		local i=number(c[n]);
		print("<TD ALIGN=LEFT WIDTH=71><IMG NAME=card", n, " WIDTH=71 HEIGHT=96 SRC='/cards/", CARDS[i].file ,"' TITLE='", CARDS[i].name, "'></TD>\n");
	}
	print("</TR>\n");
#	if (string.cmp(opt, "Deal")!=0) {
		print("<TR>\n");
		for (n=0;n<5;n++) {
			print("<TD ID=hbut",n," ALIGN=CENTER WIDTH=71");
			if (held[n]==1) { print(" FONT COLOR=green"); }
			print(" onClick=\"toggle(",n,")\">HOLD</TD>\n");
		}
		print("</TR>\n");
		print("<TR><TD ALIGN=CENTER COLSPAN=5>[<A HREF=javascript:nexthand('Deal');> DEAL </A>]</TD></TR>\n");
#	}
	print("</TABLE>\n");
#	if (string.cmp(opt, "Deal")==0) {
#		print("<A HREF='", _SERVER['SCRIPT_NAME'], "' 'onClick=location.replace('", _SERVER['SCRIPT_NAME'], "');return false;'>Play again</A>\n");
#	}
	print("</FORM>\n");
	if (string.cmp(_SERVER['REQUEST_METHOD'], "POST")!=0) {
		print("</SPAN>\n");
		print("</CENTER>\n</BODY>\n</HTML>\n");
	}
	return;
}
if (string.cmp(type(_SERVER), 'table')==0) {
	if (string.cmp(_SERVER['REQUEST_METHOD'], "POST")==0) {
		xmlmain();
	} else {
		main();
	}
}
