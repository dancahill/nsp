/*
 * ShellExecute relies on system file associations
 * CreateProcess just runs the damned thing
 * system blocks until execution is complete
 */

if (_ENV['PROGRAMFILES']!=null) global program_files=_ENV['PROGRAMFILES']; else global program_files="C:\\Program Files";
if (_ENV['SYSTEMDRIVE']!=null)  global system_drive=_ENV['SYSTEMDRIVE'];   else global system_drive="C:";
if (_ENV['SYSTEMROOT']!=null)   global system_root=_ENV['SYSTEMROOT'];     else global system_root="C:\\WINDOWS";
if (_ENV['TEMP']!=null)         global temp_dir=_ENV['TEMP'];              else global temp_dir="C:\\WINDOWS\\TEMP";
global MUTEXNAME = "NESTRAY_MUTEX";
global PROGNAME = "NesLaunchPad";
global drive=system_drive;

global MENUITEMS = {
	{ name="NullLogic &Web Sites", type="menu", table = {
		{ name="Nesla",                type="ShellExecute",  command="http://nesla.sourceforge.net/nesla/"                                        },
		{ name="NullGroupware",        type="ShellExecute",  command="http://nesla.sourceforge.net/groupware/"                                    }
	} },
	{ name="Windows &Explorer",    type="menu", table = {
		{ name="Explore "+drive+"\\",  type="CreateProcess", command=system_root+"\\explorer.exe /e,"+drive+"\\"                                          },
		{ name="My Computer",          type="CreateProcess", command=system_root+"\\explorer.exe /e,::{20D04FE0-3AEA-1069-A2D8-08002B30309D}"             },
		{ name="Control Panel",        type="ShellExecute",  command="::{20D04FE0-3AEA-1069-A2D8-08002B30309D}\\::{21EC2020-3AEA-1069-A2DD-08002B30309D}" },
		{ name="Services",             type="ShellExecute",  command="services.msc"                                                                       }
	} },
	{ name="separator",            type="separator"                                                                                                   },
	{ name="BASH Prompt",          type="CreateProcess", command="c:\\cygwin\\cygwin.bat"                                                             },
	{ name="Command Prompt",       type="CreateProcess", command=_ENV['COMSPEC']                                                                      },
	{ name="separator",            type="separator"                                                                                                   },
	{ name="Configuration",        type="CreateProcess", command="notepad.exe nestray.conf"                                                           },
	{ name="Help",                 type="script",        command="showhelp();"                                                                        },
	{ name="Exit",                 type="Exit",          command="Exit"                                                                               }
};

function check_mail(user, pass, host, port) {
	if (lastcount==null) global lastcount=0;
	if (host==null) host='localhost';
	if (port==null) port=110;
	sock=tcp.open(host, port, 0);
	if (typeof(sock)!='sock4') {
		TrayNotice("can't connect to pop3 server", "pop3 error", 5);
		return;
	}
	line=tcp.gets(sock);
	tcp.write(sock, "user "+user+"\r\n");
	line=tcp.gets(sock);
	if (string.sub(line, 0, 3)!="+OK") {
		win.MessageBox("pop3 error: "+line, "test");
		o=tcp.write(sock, "QUIT\r\n");
		line=tcp.gets(sock);
		tcp.close(sock);
		return;
	}
	o=tcp.write(sock, "pass "+pass+"\r\n");
	line=tcp.gets(sock);
	if (string.sub(line, 0, 3)!="+OK") {
		win.MessageBox("pop3 error: "+line, "test");
		o=tcp.write(sock, "QUIT\r\n");
		line=tcp.gets(sock);
		tcp.close(sock);
		return;
	}
	if (string.sub(line, 0, 3)=="+OK") {
		o=tcp.write(sock, "STAT\r\n");
		line=tcp.gets(sock);
		status=string.split(line, " ");
		if (tonumber(status[1])!=lastcount) {
			lastcount=tonumber(status[1]);
			plural='s'; if (lastcount==1) plural='';
			if (lastcount>0) {
				win.PlaySound(system_root+"\\Media\\notify.wav");
				TrayNotice("E-mail status for\n    "+user+"@"+host+"\n\nYou have "+lastcount+" message"+plural, "E-mail status", 10);
			}
		}
	}
	o=tcp.write(sock, "QUIT\r\n");
	line=tcp.gets(sock);
	tcp.close(sock);
	return;
}

function checkupdate() {
	// check version
	ht=http.get(0, "nesla.sourceforge.net", 80, "/nesla/version.php");
	if (typeof(ht)!='table') return 0;
	status=string.split(ht.status, " ");
	if (tonumber(status[1])==200) {
		X=xml.read(ht.body);
		VER=X['version'][0];
		v=VER['major'][0]['value']+'.'+VER['minor'][0]['value']+'.'+VER['point'][0]['value'];
		if (_version_!=v) {
			win.PlaySound(system_root+"\\Media\\notify.wav");
			win.MessageBox("Your version: "+_version_+"\nCurrent Version: "+v, "version");
			win.ShellExecute("http://nesla.sourceforge.net/downloads.php");
			return 1;
		}
	}
	return 0;
}

function showhelp() {
	win.MessageBox(
"NESLA NullLogic Embedded Scripting Language
	http://nesla.sourceforge.net/
	Copyright (C) 2007-2009 Dan Cahill

NesTray is a fully programmable tray icon.  Every menu option, timed event
and dialog box in this program is 100% configurable by you the user.

Using a simple C based scripting style and a core library of shell, network
and database functions, the experienced user can script simple desktop
helper applications in minutes.
", "NullLogic's Nesla SysTray Host");
}

/*
 * onload() runs when the host starts
 */
function onload() {
	checkupdate();
	return;
}

/*
 * onreload() runs when the config file changes
 */
function onreload() {
	win.PlaySound(system_root+"\\Media\\notify.wav");
	TrayNotice("A change in the configuration was detected and updated.", "Configuration Updated", 5);
	return;
}

/*
 * the cron() function runs every single minute
 *
 * put whatever you want here to set what it does and how often it does it
 */
function cron() {
	t=localtime();

	// check mail every 5 minutes
//	if (t.tm_min%5==0) check_mail("username", "password", "mail.server.com");
	// tasks to do at the top of each hour
	if (t.tm_min==0) {
		// notify the user when it's 12 PM
		if (t.tm_hour==12) {
			win.PlaySound(system_root+"\\Media\\chimes.wav");
			TrayNotice("it's 12:00 PM\nGo eat something.", "Reminder", 15);
		} else if (t.tm_hour==21) {
			if (tm_wday==2) { // Tuesday at 9 PM
				win.PlaySound(system_root+"\\Media\\chimes.wav");
				TrayNotice("House is on...", "Reminder", 15);
			}
		}
	}
	return;
}

/*
 * onexit() runs when the host closes
 */
function onexit() {
	return;
}
