#!/usr/bin/nsp

class testlib2 {
	function constructor() {
	}
	function shared_sql_tests(db) {
		db.open();
		db.query("CREATE TABLE test_table ( id integer, col1 varchar(8), col2 varchar(8) );", false);
		printf("db.changes = %d;\r\n", db.changes);
		db.begin();
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (1, 'a', '%s');", db.escape("abc")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (2, 'b', '%s');", db.escape("a'b'c")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (3, 'c', '%s');", db.escape('a"b"c')), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.commit();
		//db.rollback();
		db.query("SELECT * FROM test_table;");
		printf("db.last_query = \"%s\";\r\n", db.last_query);
		while ((row=db.getnext())!=null) {
			printf("row = %s;\r\n", serialize(row).replace('\r', '').replace('\n', ' ').replace('\t', ''));
		}
		db.endquery();
		printf("db.changes = %d;\r\n", db.changes);
		db.close();
	}
	function fbsql() {
		ci = { host="localhost", port=3050, username="SYSDBA", password="masterkey", database="/tmp/nstest.fdb" };
		file.unlink(ci.database);
		file.writeall("/tmp/nstest.sql", sprintf("SET SQL DIALECT 3;\r\nCREATE DATABASE '%s'\r\nUSER '%s' PASSWORD '%s'\r\nPAGE_SIZE 16384;\r\n", ci.database, ci.username, ci.password));
		system("isql-fb -input /tmp/nstest.sql 2> /dev/null");
		file.unlink("/tmp/nstest.sql");
		try {
			dl.load("data");
			dl.load("fbsql");
			db=new data.fbsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
		return;
	}
	function mysql() {
		ci = { host="localhost", port=3306, username="root", password="test", database="nstest" };
		system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		system(sprintf("mysql -u%s -p%s -e \"CREATE DATABASE nstest\"", ci.username, ci.password));
		try {
			dl.load("data");
			dl.load("mysql");
			db=new data.mysql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		//system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		return;
	}
	function pgsql() {
		ci = { host="localhost", port=5432, username="postgres", password="test", database="nstest" };
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		system(sprintf("export PGPASSWORD=%s && createdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		try {
			dl.load("data");
			dl.load("pgsql");
			db=new data.pgsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		return;
	}
	function sqlite() {
		ci = { database="/tmp/nstest.db" };
		file.unlink(ci.database);
		try {
			dl.load("data");
			dl.load("sqlite");
			db=new data.sqlite.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
	}
	function mongodb() {
		function trim(s) {
			if (s.gettype()=='string') return s;
			return serialize(s).replace('\t','').replace('\r','').replace('\n',' ');
		}
		class mongo {
			function constructor() {
				if (!dl.load("mongodb")) throw "mongo library not found";
				/*
				db.adminCommand( { "hostInfo": 1 } )
				use admin
				db.auth( { user: "root", pwd: "test" } )
				use nulltest
				db.dropDatabase()
				*/

				conninfo = { url="mongodb://root:test@localhost:27017/", database="nulltest", collection="users" };
				this.client = new data.mongodb.client(conninfo);
				this.client.open();

				//q='{ "hostInfo": 1 }';
				//r=client.clientcommand(q);
				//printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));

				client.db.use("nulltest2", "users");
				printf("[%s][%s]\r\n", client.db.name, client.collection.name);
			}
			function destructor() {
				print("shutting down mongo client\r\n");
				if (client) client.close();
			}
			function clientcommand() {
				printf("--beginning clientcommand tests--\r\n");
				q = '{ "ping": 1 }';
				r = client.clientcommand(q);
				printf("\tq = %s\r\n\tr = %s\r\n", trim(q), trim(r));
				q = { ping = 1 };
				r = client.clientcommand(q);
				printf("\tq = %s\r\n\tr = %s\r\n", trim(q), trim(r));
			}
			function collectioncommand() {
				printf("--beginning collectioncommand tests--\r\n");
				q = { collStats = "users" };
				try {
					r = this.client.collection.command(q);
				} catch (ex) {
					print("client.collection.command(q) failed. this is normal the first time\r\n");
				}
				printf("\tq = %s\r\n\tr = %s\r\n", trim(q), trim(r));
			}
			function collectioninsert() {
				printf("--beginning collectioninsert tests--\r\n");
				this.newoid = client.collection.newoid();
				q = sprintf('{ "_id": { "$oid": "%s" }, "name": { "first": "Dan", "last": "Cahill" }, "time": "%s" }', this.newoid, time.sqltime());
				r = client.collection.insert(q);
				printf("\tq = %s\r\n\tr = %s\r\n", trim(q), trim(r));
			}
			function collectionupdate() {
				printf("--beginning collectionupdate tests--\r\n");
				q = '{ "name": "Bob" }';
				d = '{ "name": "Bob", "rating": 2 }';
				r = client.collection.update(q, d);
				printf("\tq = %s\r\n\td = %s\r\n\tr = %s\r\n", trim(q), trim(d), trim(r));
				//q = '{ "_id": { "$oid": "5d6c615f7c71de67c00c8161" } }';
				q = sprintf('{ "_id": { "$in": ["%s", { "$oid": "%s" }] } }', this.newoid, this.newoid);
				d = sprintf('{ "$set": { "time2": "%s" } }', time.sqltime());
				r = client.collection.update(q, d);
				printf("\tq = %s\r\n\td = %s\r\n\tr = %s\r\n", trim(q), trim(d), trim(r));
			}
			function collectionremove() {
				printf("--beginning collectionremove tests--\r\n");
				// search for _id must match how doc was created
				// search using $oid is right but _id gets inserted
				// as a string in the inserted doc is an nsp table
				o = "5d6ad3197c71de503813daa1";
				//q = sprintf('{ "_id": { "$oid": "%s" } }', o);
				q = sprintf('{ "_id": { "$in": ["%s", { "$oid": "%s" }] } }', o, o);
				r = client.collection.remove(q);
				printf("\tq = %s, r = %s\r\n", q, r);
			}
			function collectionfind() {
				printf("--beginning collectionfind tests--\r\n");
				//q = '{"_id": {"$oid": "5d6b12367c71de08fb215601"}}';
				//q = { ["name.first"] = "Dan"};
				//q = "{}";
				//q = {};
				q = '{ "$query": {}, "$orderby": { "time": 1 } }';

				client.collection.find(q);
				while ((row=client.collection.getnext())!=null) {
					//q = sprintf('{ "_id": { "$in": ["%s", { "$oid": "%s" }] } }', row._id, row._id);
					//r = client.collection.remove(q);
					printf("\t%s\r\n", trim(row));
					if (!firstid) firstid = row._id;
				}
				//client.collection.endfind(); // <- shouldn't need this
				if (firstid) {
					//q = sprintf('{ "_id": { "$oid": "%s" } }', firstid);
					q = sprintf('{ "_id": { "$in": ["%s", { "$oid": "%s" }] } }', firstid, firstid);
					r = client.collection.remove(q);
					printf("\tq = %s, r = %s\r\n", q, r);
				}
				var todelete = {
					"5d6edfca7c71de1f7a2cdcf1"
				};
				foreach (n,v in todelete) {
					q = sprintf('{ "_id": { "$in": ["%s", { "$oid": "%s" }] } }', v, v);
					r = client.collection.remove(q);
					printf("\tfirstid = [%s] - collection.remove(q) = %s, r = %s\r\n", firstid, trim(q), r);
				}
			}
		}
		try {
			test = new mongo();
			test.clientcommand();
			test.collectioninsert();
			test.collectionupdate();
			test.collectionfind();
			test.collectioncommand();
			test.collectionremove();
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		} finally {
			delete test;
		}
	}
};

//tests = new testlib2();
//tests.fbsql();
//tests.mysql();
//tests.pgsql();
//tests.sqlite();
//tests.mongodb();
