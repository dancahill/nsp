#!/usr/bin/nsp

class testlib2 {
	function constructor() {
	}
	function shared_sql_tests(db) {
		db.open();
		db.query("CREATE TABLE test_table ( id integer, col1 varchar(8), col2 varchar(8) );", false);
		printf("db.changes = %d;\r\n", db.changes);
		db.begin();
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (1, 'a', '%s');", db.escape("abc")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (2, 'b', '%s');", db.escape("a'b'c")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (3, 'c', '%s');", db.escape('a"b"c')), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.commit();
		//db.rollback();
		db.query("SELECT * FROM test_table;");
		printf("db.last_query = \"%s\";\r\n", db.last_query);
		while ((row=db.getnext())!=null) {
			printf("row = %s;\r\n", serialize(row).replace('\r', '').replace('\n', ' ').replace('\t', ''));
		}
		db.endquery();
		printf("db.changes = %d;\r\n", db.changes);
		db.close();
	}
	function fbsql() {
		ci = { host="localhost", port=3050, username="SYSDBA", password="masterkey", database="/tmp/nstest.fdb" };
		file.unlink(ci.database);
		file.writeall("/tmp/nstest.sql", sprintf("SET SQL DIALECT 3;\r\nCREATE DATABASE '%s'\r\nUSER '%s' PASSWORD '%s'\r\nPAGE_SIZE 16384;\r\n", ci.database, ci.username, ci.password));
		system("isql-fb -input /tmp/nstest.sql 2> /dev/null");
		file.unlink("/tmp/nstest.sql");
		try {
			dl.load("data");
			dl.load("fbsql");
			db=new data.fbsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
		return;
	}
	function mysql() {
		ci = { host="localhost", port=3306, username="root", password="test", database="nstest" };
		system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		system(sprintf("mysql -u%s -p%s -e \"CREATE DATABASE nstest\"", ci.username, ci.password));
		try {
			dl.load("data");
			dl.load("mysql");
			db=new data.mysql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		//system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		return;
	}
	function pgsql() {
		ci = { host="localhost", port=5432, username="postgres", password="test", database="nstest" };
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		system(sprintf("export PGPASSWORD=%s && createdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		try {
			dl.load("data");
			dl.load("pgsql");
			db=new data.pgsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		return;
	}
	function sqlite() {
		ci = { database="/tmp/nstest.db" };
		file.unlink(ci.database);
		try {
			dl.load("data");
			dl.load("sqlite");
			db=new data.sqlite.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
	}
	function mongodb() {
		function trim(s) {
			return serialize(s);
			//return serialize(s).replace('\t','').replace('\r','').replace('\n',' ');
		}
		class mongo {
			function constructor() {
				dl.load("mongodb");

				/*
				client = mongoc_client_new("mongodb://localhost:27017/?appname=executing-example");
				database = mongoc_client_get_database(client, "nulltest");
				collection = mongoc_client_get_collection(client, "nulltest", "users");
				"db.users.insertOne( { name: "Bob", age: 42 } )"
				const char  *json = "{\"name\": {\"first\":\"Grace\", \"last\":\"Hopper\"}}";
				const char  *jsonquery = "db.users.find()";
				const char  *jsoninsert = "db.users.insert({\"name\": {\"first\":\"Grace\", \"last\":\"Hopper\"}})";
				const char  *jsoninsert = "{\"name\": {\"first\":\"Grace\", \"last\":\"Hopper\"}}";
				const char  *jsonquery = "db.users.find()";
				db.adminCommand( { "hostInfo" : 1 } )

				connecting to: localhost:27017/test
				> use admin
				switched to db admin
				> db.auth( { user: "root", pwd: "test" } )
				1
				> use nulltest
				switched to db nulltest
				> db.users.find()
				{ "_id" : ObjectId("5d6a8af215a72eb40448b8dc"), "name" : "Bob", "rating" : 2 }
				{ "_id" : ObjectId("5d6c615f7c71de67c00c8161"), "time" : "2019-09-02 14:57:01" }
				>
				db.dropDatabase()
				*/

				//mongo localhost:27017/admin -u "root" -p "test"
				//mongoc_client_t *client =  mongoc_client_new ("mongodb://user:password@localhost/?authSource=mydb");
				//conninfo = { url="mongodb://root:test@localhost:27017/admin", database="nulltest", collection="users" };
				conninfo = { url="mongodb://root:test@localhost:27017/", database="nulltest", collection="users" };
				//conninfo = { url="mongodb://root:test@localhost:27017/" };
				this.client = new data.mongodb.client(conninfo);
				this.client.open();
				//print("serialize(client) = ",serialize(client));
				//client.db.use("nulltest2", "users");
				//io.flush();

				//printf('client.db.use("nulltest2", "users");\r\n');
				//client.db.use("nulltest3", "users");

				//db=client.db;
				client.db.use("nulltest2", "users");

/*
				db.printstuff=function() {
					printf("[%s][%s]\r\n", typeof(this), this);
					printf("[%s][%s]\r\n", typeof(this.client), this.client);
					printf("[%s][%s]\r\n", typeof(this.client.database), this.client.database);
					printf("[%s][%s]\r\n", typeof(this.client.collection), this.client.collection);
					printf("data.mongodb.client.db.collection = [%s][%s]\r\n", typeof(data.mongodb.client.db.collection), data.mongodb.client.db.collection);
					printf("this.client.connection = [%s][%s]\r\n", typeof(this.client.connection), this.client.connection);
				}
				printf("[%s][%s]\r\n", typeof(db), db);
				printf("[%s][%s]\r\n", typeof(db.client), db.client);
				printf("[%s][%s]\r\n", typeof(db.client.database), db.client.database);
				printf("[%s][%s]\r\n", typeof(db.client.collection), db.client.collection);
				printf("db.client.connection = [%s][%s]\r\n", typeof(db.client.connection), db.client.connection);
				db.printstuff();
				printf('db.use("nulltest2", "users");\r\n');
				db.use("nulltest2", "users");
				io.flush();
*/
				printf("client.db.name = [%s][%s]\r\n", typeof(client.db.name), client.db.name);
				printf("client.collection.name = [%s][%s]\r\n", typeof(client.collection.name), client.collection.name);
				printf("db.client.db.name = [%s][%s]\r\n", typeof(db.client.db.name), db.client.db.name);
				printf("db.client.collection.name = [%s][%s]\r\n", typeof(db.client.collection.name), db.client.collection.name);

				q = { ping = 1 };
				r=client.clientcommand(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));
			}
			function destructor() {
				print("shutting down mongo client\r\n");
				io.flush();
				client.close();
			}
			function clientcommand() {
				printf("--beginning clientcommand tests--\r\n");

				//q='{ "db.auth": { "user": "root", "pwd": "test" } }';
				//r=client.clientcommand(q);
				//printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));

				printf("client.db.name = [%s][%s]\r\n", typeof(client.db.name), client.db.name);
				printf("client.collection.name = [%s][%s]\r\n", typeof(client.collection.name), client.collection.name);
				printf("client.clientcommand = [%s][%s]\r\n", typeof(client.clientcommand), client.clientcommand);
				printf("this.client.clientcommand = [%s][%s]\r\n", typeof(this.client.clientcommand), this.client.clientcommand);

				//q = { ping = 1, pong = {a=1, b="2", c=true} };
				q = { ping = 1 };
				r=client.clientcommand(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));

				q='{ "ping" : 1 }';
				r=client.clientcommand(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));

				//q='{ "hostInfo" : 1 }';
				//r=client.clientcommand(q);
				//printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));

				printf("client.collection = [%s][%s]\r\n", typeof(client.collection), client.collection);
				printf("client.collection.client = [%s][%s]\r\n", typeof(client.collection.client), client.collection.client);
				printf("client.collection.client.connection = [%s][%s]\r\n", typeof(client.collection.client.connection), client.collection.client.connection);

				c=client.collection;
				r=c.insert(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));
			}
			function collectioncommand() {
				printf("--beginning collectioncommand tests--\r\n");
				//q='{ "collStats" : "users" }';
				q = { collStats = "users" };
				try {
					r=this.client.collectioncommand(q);
				} catch (ex) {
					print("client.collectioncommand(q) failed. this is normal the first time\r\n");
				}
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));
			}
			function collectioninsert() {
				printf("--beginning collectioninsert tests--\r\n");
				q='{ "name" : { "first" : "Dan", "last" : "Cahill" }, "time": "'+time.sqltime()+'" }';
				//r=client.collection.insert(q);
				//c=client.collection;
				//r=c.insert(q);
				printf("client.connection = [%s][%s]\r\n", typeof(client.connection), client.connection);
				printf("client.collection.insert = [%s][%s]\r\n", typeof(client.collection.insert), client.collection.insert);
				r=client.collection.insert(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));
			}
			function collectionupdate() {
				printf("--beginning collectionupdate tests--\r\n");
				q='{ "name":  "Bob" }';
				d='{ "name":  "Bob", "rating": 2 }';
				r=client.collection.update(q, d);
				printf("q = %s\r\nd = %s\r\nr = %s\r\n", trim(q), trim(d), trim(r));
				q='{ "_id" : { "$oid" : "5d6c615f7c71de67c00c8161" } }';
				d='{ "time": "'+time.sqltime()+'" }';
				r=client.collection.update(q, d);
				printf("q = %s\r\nd = %s\r\nr = %s\r\n", trim(q), trim(d), trim(r));
			}
			function collectionremove() {
				printf("--beginning collectionremove tests--\r\n");
				q='{ \"_id\" : { \"$oid\" : \"5d6ad3197c71de503813daa1\" } }';
				r=client.collection.remove(q);
				printf("q = %s\r\nr = %s\r\n", trim(q), trim(r));
			}
			function collectionfind() {
				printf("--beginning collectionfind tests--\r\n");

				//client.collectionfind('{"_id": {"$oid": "5d6ca0987c71de2f1f052dd1"}}');
				//client.collectionfind('{"name": {"first": "Dan"}}');
				//client.collectionfind('{ "name.first": "Dan" }');
				client.collection.find({["name.first"]="Dan"});
				while ((row=client.collection.getnext())!=null) {
					printf("\t%s\r\n", trim(row));
					q='{ \"_id\" : { \"$oid\" : \"'+row._id+'\" } }';
					r=client.collection.remove(q);
					printf("q = %s\r\n", trim(q));
				}
				//client.collection.endfind();

				client.collection.find("{}");
				//m.collectionfind('{"_id":{"$oid":"5d6b12367c71de08fb215601"}}');
				while ((row=client.collection.getnext())!=null) {
					printf("\t%s\r\n", trim(row));
				}
				client.collection.endfind();

				var todelete = {
					"5d6c611c7c71de67607a15e1"
				};
				foreach (n,v in todelete) {
					q='{ \"_id\" : { \"$oid\" : \"'+v+'\" } }';
					r=client.collection.remove(q);
					printf("q=[[%s]]\r\nr=[[%s]]\r\n\r\n", q, r);
				}
			}
		}
		try {
			test = new mongo();
			test.clientcommand();
			test.collectioninsert();
			test.collectionupdate();
			test.collectionremove();
			test.collectionfind();
			test.collectioncommand();
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		} finally {
			delete test;
		}
	}
};

//tests = new testlib2();
//tests.fbsql();
//tests.mysql();
//tests.pgsql();
//tests.sqlite();
//tests.mongodb();
