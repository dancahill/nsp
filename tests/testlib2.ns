#!/usr/bin/nsp

class testlib2 {
	function constructor() {
	}
	function shared_sql_tests(db) {
		db.open();
		db.query("CREATE TABLE test_table ( id integer, col1 varchar(8), col2 varchar(8) );", false);
		printf("db.changes = %d;\r\n", db.changes);
		db.begin();
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (1, 'a', '%s');", db.escape("abc")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (2, 'b', '%s');", db.escape("a'b'c")), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.query(sprintf("INSERT INTO test_table (id, col1, col2) VALUES (3, 'c', '%s');", db.escape('a"b"c')), false);
		printf("db.changes = %d;\r\n", db.changes);
		db.commit();
		//db.rollback();
		db.query("SELECT * FROM test_table;");
		printf("db.last_query = \"%s\";\r\n", db.last_query);
		while ((row=db.getnext())!=null) {
			printf("row = %s;\r\n", serialize(row).replace('\r', '').replace('\n', ' ').replace('\t', ''));
		}
		db.endquery();
		printf("db.changes = %d;\r\n", db.changes);
		db.close();
	}
	function fbsql() {
		ci = { host="localhost", port=3050, username="SYSDBA", password="masterkey", database="/tmp/nstest.fdb" };
		file.unlink(ci.database);
		file.writeall("/tmp/nstest.sql", sprintf("SET SQL DIALECT 3;\r\nCREATE DATABASE '%s'\r\nUSER '%s' PASSWORD '%s'\r\nPAGE_SIZE 16384;\r\n", ci.database, ci.username, ci.password));
		system("isql-fb -input /tmp/nstest.sql 2> /dev/null");
		file.unlink("/tmp/nstest.sql");
		try {
			dl.load("data");
			dl.load("fbsql");
			db=new data.fbsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
		return;
	}
	function mysql() {
		ci = { host="localhost", port=3306, username="root", password="test", database="nstest" };
		system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		system(sprintf("mysql -u%s -p%s -e \"CREATE DATABASE nstest\"", ci.username, ci.password));
		try {
			dl.load("data");
			dl.load("mysql");
			db=new data.mysql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		//system(sprintf("mysql -u%s -p%s -e \"DROP DATABASE IF EXISTS nstest\"", ci.username, ci.password));
		return;
	}
	function pgsql() {
		ci = { host="localhost", port=5432, username="postgres", password="test", database="nstest" };
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		system(sprintf("export PGPASSWORD=%s && createdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		try {
			dl.load("data");
			dl.load("pgsql");
			db=new data.pgsql.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		system(sprintf("export PGPASSWORD=%s && dropdb -h localhost -U %s %s", ci.password, ci.username, ci.database));
		return;
	}
	function sqlite() {
		ci = { database="/tmp/nstest.db" };
		file.unlink(ci.database);
		try {
			dl.load("data");
			dl.load("sqlite");
			db=new data.sqlite.client(ci);
			this.shared_sql_tests(db);
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
		file.unlink(ci.database);
	}
	function mongodb() {
		try {
			local function trim(s) { return serialize(s).replace('\t','').replace('\r','').replace('\n',' '); }
			dl.load("mongodb");
			conninfo = { url="mongodb://localhost:27017/", database="nulltest", collection="users" };
			m=new data.mongodb.client();
			m.open();
			printf("--beginning clientcommand tests--\r\n");

			q = { ping = 1, pong = {a=1, b="2", c=true} };
			//q = { ping = 1 };
			r=m.clientcommand(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", trim(q), r);

			q='{ "ping" : 1 }';
			r=m.clientcommand(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", q, r);

			q='{ "hostInfo" : 1 }';
			r=m.clientcommand(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", q, r);

			printf("--beginning collectioncommand tests--\r\n");
			q='{ "collStats" : "users" }';
			r=m.collectioncommand(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", q, r);

			printf("--beginning collectioninsert tests--\r\n");
			q='{ "name" : { "first" : "Dan", "last" : "Cahill" }, "time": "'+time.sqltime()+'" }';
			r=m.collectioninsert(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", q, r);

			printf("--beginning collectionupdate tests--\r\n");
			q='{ "name":  "Bob" }';
			d='{ "name":  "Bob", "rating": 2 }';
			r=m.collectionupdate(q, d);
			printf("\tq=[[%s]]\r\n\td=[[%s]]\r\n\tr=[[%s]]\r\n", q, d, r);
			q='{ "_id" : { "$oid" : "5d6c615f7c71de67c00c8161" } }';
			d='{ "time": "'+time.sqltime()+'" }';
			r=m.collectionupdate(q, d);
			printf("\tq=[[%s]]\r\n\td=[[%s]]\r\n\tr=[[%s]]\r\n", q, d, r);

			printf("--beginning collectionremove tests--\r\n");
			q='{ \"_id\" : { \"$oid\" : \"5d6ad3197c71de503813daa1\" } }';
			r=m.collectionremove(q);
			printf("\tq=[[%s]]\r\n\tr=[[%s]]\r\n", q, r);

			printf("--beginning collectionfind tests--\r\n");
			m.collectionfind("{}");
			//m.collectionfind('{"_id":{"$oid":"5d6b12367c71de08fb215601"}}');
			while ((row=m.collectiongetnext())!=null) {
				printf("\t%s\r\n", row);
			}
			m.collectionendfind();

			var todelete = {
				"5d6c611c7c71de67607a15e1"
			};
			foreach (n,v in todelete) {
				q='{ \"_id\" : { \"$oid\" : \"'+v+'\" } }';
				r=m.collectionremove(q);
				printf("q=[[%s]]\r\nr=[[%s]]\r\n\r\n", q, r);
			}
		} catch (ex) {
			printf("Exception: %s\r\n", ex.description);
		}
	}
};

//tests = new testlib2();
//tests.fbsql();
//tests.mysql();
//tests.pgsql();
//tests.sqlite();
//tests.mongodb();
